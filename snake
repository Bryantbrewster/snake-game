from turtle import Screen, Turtle

starting_positions = [(0, 0), (-20, 0), (-40, 0)]

# .blocks creates the empty list that can be appended, and .create_snake
# activates the create_snake method that creates 3 blocks using the 3 starting
# positions

# by attaching .head in the initializer, and making it equal to self.blocks[0], it makes the head of the snake
# callable by doing "snake.head" (snake = name of the object created from the Snake class). This way, in functions
# like snake.up() it will invoke the up() functions which tells the head of the snake to go north
class Snake:
    def __init__(self):
        self.blocks = []
        self.create_snake()
        self.head = self.blocks[0]


# Creates 3 blocks to start
    def create_snake(self):
        for position in starting_positions:
            self.add_segment(position)

    def add_segment(self, position):
        snake_block = Turtle('square')
        snake_block.color('white')
        snake_block.penup()
        snake_block.goto(position)
        self.blocks.append(snake_block)

    def extend(self):
        self.add_segment(self.blocks[-1].position())


# Move the snake, starting from the back, with the head being independent
    def move(self):
        for block in range(len(self.blocks) - 1, 0, -1):
            new_x_cor = self.blocks[block - 1].xcor()
            new_y_cor = self.blocks[block - 1].ycor()
            self.blocks[block].goto(x=new_x_cor, y=new_y_cor)
        self.head.forward(20)

    def up(self):
        if self.head.heading() == 270:
            pass
        else:
            self.head.setheading(90)

    def down(self):
        if self.head.heading() == 90:
            pass
        else:
            self.head.setheading(270)

    def left(self):
        if self.head.heading() == 0:
            pass
        else:
            self.head.setheading(180)

    def right(self):
        if self.head.heading() == 180:
            pass
        else:
            self.head.setheading(0)




